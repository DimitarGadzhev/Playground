#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math
import re
regex = re.compile(r"^.*interfaceOpDataFile.*$", re.IGNORECASE)

# if __name__ == "__main__":
#     main()
    
def to_list(string):
    elem_list = []

    for i in string_n:
       elem_list.append(i)

    return elem_list
    
def getDigits(elem_arr):
    digits = []
    
    for e in elem_arr:
        if(e.isdigit()):
            current_number = int(e)
            digits.append(current_number)

    return digits

# --------------------------------------------------------------
# Task 1 - Factorial
# --------------------------------------------------------------

def factorial(n):
    result = math.factorial(n)
    return result

# print(factorial(0)) # 1
# print(factorial(1)) # 1
# print(factorial(5)) # 120

# --------------------------------------------------------------
# Task 2 - First Nth members of fibonacci
# --------------------------------------------------------------

def fib_members(n):
    a, b = 0, 1
    fib_numbers = []
    
    for _ in range(n):
        a, b = b, a+b
        fib_numbers.append(a)
        
    return fib_numbers

# print(fib_members(1))  # [1]
# print(fib_members(2))  # [1, 1]
# print(fib_members(3))  # [1, 1, 2]
# print(fib_members(10)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

# --------------------------------------------------------------
# Task 3 - Sum all digits of a number
# --------------------------------------------------------------

def sum_of_digits(n):
    num_as_string = str(n)
    digits = getDigits(num_as_string)
    
    return sum(digits)
    
# print(sum_of_digits(1325132435356)) # 43
# print(sum_of_digits(123)) # 6
# print(sum_of_digits(6))   # 6
# print(sum_of_digits(-10)) # 1

# --------------------------------------------------------------
# Task 4 - Factorial Digits
# --------------------------------------------------------------

def fact_digits(n):
    digits_list = getDigits(str(n))
    result = []
    
    for d in digits_list:
        result.append(factorial(d))

    return sum(result)

# print(fact_digits(111)) # 3
# print(fact_digits(145)) # 145
# print(fact_digits(999)) # 1088640

# --------------------------------------------------------------
# Task 5 - Palindromes (Recursive solution)
# --------------------------------------------------------------

def is_palindrome(s):
    s = str(s).lower()
    s = re.sub('[\W+]', '', s)

    if len(s) <= 1:
        return True
    elif s[:1] != s[len(s)-1:]:
        return False
    else:
        return is_palindrome(s[1:len(s)-1])

# print(is_palindrome('121'))   # True
# print(is_palindrome('kapak')) # True
# print(is_palindrome('baba'))  # False
# print(is_palindrome('A dog! A panic in a pagoda!')) # True
# print(is_palindrome('A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!')) # True

# --------------------------------------------------------------
# Task 6 - Turn a number into a list of digits
# --------------------------------------------------------------

def to_digits(n):
    result = getDigits(str(n))
    return result

# print(to_digits(123))    # [1, 2, 3]
# print(to_digits(99999))  # [9, 9, 9, 9, 9]
# print(to_digits(123023)) # [1, 2, 3, 0, 2, 3]

# --------------------------------------------------------------
# Task 7 - Turn a list of difits into a number
# --------------------------------------------------------------

def to_number(digits):
    str_number = "".join(str(d) for d in digits)
    number = int(str_number)

    return number

# print(to_number([1,2,3]))       # 123
# print(to_number([9,9,9,9,9]))   # 99999
# print(to_number([1,2,3,0,2,3])) # 123023

# --------------------------------------------------------------
# Task 8 Fibonacci Number
# --------------------------------------------------------------

def fib_number(n):
    numbers = fib_members(n)
    result = "".join(str(num) for num in numbers)
    return result

# print(fib_number(3))  # 112
# print(fib_number(10)) # 11235813213455
      
# --------------------------------------------------------------
# Task 9 - Vowels in a string
# --------------------------------------------------------------
def count_vowels(text):
    vowels = 'aeiouy'
    text = text.lower()
    counter = 0

    for char in text:
        for v in vowels:
            if char == v:
                counter += 1

    return counter

# print(count_vowels('Python')) # 2
# print(count_vowels('Theistareykjarbunga')) # 8 (It's a volcano name!)
# print(count_vowels('grrrrgh!')) # 0
# print(count_vowels('Github is the second best thing that happend to programmers, after the keyboard!')) #22
# print(count_vowels('A nice day to code!')) # 8

# --------------------------------------------------------------
# Task 10 - Consonants in a string
# --------------------------------------------------------------
def count_consonants(text):
    vowels = 'aeiouy'
    counter = 0
    text = str(text).lower()
    text = re.sub('[\W+]', '', text)

    for char in text:
        if char not in vowels:
            counter += 1

    return counter

# print(count_consonants('Python'))   # 4
# print(count_consonants('Theistareykjarbunga')) # 11
# print(count_consonants('grrrrgh!')) # 7
# print(count_consonants('Github is the second best thing that happend to programmers, after the keyboard!'))   # 44
# print(count_consonants('A nice day to code!')) # 6

# --------------------------------------------------------------
# Task 11 - Char histogram
# --------------------------------------------------------------

# TODO

# --------------------------------------------------------------
# Task 12 - Palindrome Score
# --------------------------------------------------------------

# TODO

# --------------------------------------------------------------
# Task 13 - Increasing Sequence
# --------------------------------------------------------------

# TODO

# --------------------------------------------------------------
# Task 14 - Decreasing Sequence
# --------------------------------------------------------------

# TODO

# --------------------------------------------------------------
# Task 15 - Hack Numbers
# --------------------------------------------------------------
